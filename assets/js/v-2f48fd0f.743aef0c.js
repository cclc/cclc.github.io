"use strict";(self.webpackChunkcclc_vuepress=self.webpackChunkcclc_vuepress||[]).push([[5127],{3191:(t,e,a)=>{a.r(e),a.d(e,{data:()=>i});const i={key:"v-2f48fd0f",path:"/backend/mvc5-request-missing.html",title:"ASP.NET MVC多语言处理中请求丢失或参数丢失",lang:"zh-CN",frontmatter:{title:"ASP.NET MVC多语言处理中请求丢失或参数丢失",date:"2017-11-02",categories:[".NET"],tags:[".NET"]},excerpt:"",headers:[],git:{},filePathRelative:"backend/mvc5-request-missing.md"}},2608:(t,e,a)=>{a.r(e),a.d(e,{default:()=>h});var i=a(6252);const n=(0,i._)("h1",{id:"asp-net-mvc多语言处理中请求丢失或参数丢失",tabindex:"-1"},[(0,i._)("a",{class:"header-anchor",href:"#asp-net-mvc多语言处理中请求丢失或参数丢失","aria-hidden":"true"},"#"),(0,i.Uk)(" ASP.NET MVC多语言处理中请求丢失或参数丢失")],-1),c=(0,i._)("p",null,"在项目中碰到了一个问题是：POST请求一个非多语言处理的[WithoutLocalization]函数A，而该函数在运行时又会调用其他需要多语言的函数B，这就会导致函数B里面和多语言有关的值都是默认值，并非是用户设定的值。",-1),l=(0,i._)("p",null,"如果去掉[WithoutLocalization]属性后，则函数A在初次调用，经Localization处理后，请求就丢失了。这是因为函数A只接受POST请求，而Localization重定向的请求是GET的，所以定位不到函数A就丢失了。",-1),s=(0,i._)("p",null,"如果去掉[WithoutLocalization]和[POST]属性，则重定向后还能找到函数A，但是原本传入的参数丢失了。",-1),o=(0,i._)("p",null,[(0,i.Uk)("解决办法： 去掉函数A的[WithoutLocalization]和[POST]属性，在调用函数A的地方使用GET方法，并在URL中加入语言设定，使得Localization不做重定向的步骤。只做图中红圈部分的内容，这样函数B也能正确的进行多语言处理。 "),(0,i._)("img",{src:"/blog_images/mvc5-request-missing/1.png",alt:"1"})],-1),r=(0,i._)("p",null,"如果大家有更好的方法也欢迎分享。",-1),u={},h=(0,a(3744).Z)(u,[["render",function(t,e){return(0,i.wg)(),(0,i.iD)(i.HY,null,[n,c,l,s,o,r],64)}]])},3744:(t,e)=>{e.Z=(t,e)=>{const a=t.__vccOpts||t;for(const[t,i]of e)a[t]=i;return a}}}]);